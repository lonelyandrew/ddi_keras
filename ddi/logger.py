#!/usr/bin/env python3

'''Logging helper module.
This module consists a ``Logger`` class which perform logging actions through
the whole process of the dataset, pre-training, training, and post-training.

Example:
    You can call the logger as following example::
        logger = Logger()
        msg = 'bla bla bla'  # Put any thing you wanna log here
        logger.log(msg)
    For the need of viewing the loss value monitoring, you can send a loss
    function plot if you have turn on the slack configuration before::
        logger.log(msg, send_loss_image=True)
'''

import logging
import os
from datetime import datetime


class Logger(object):
    '''Logger manages all logging actions during every step.

    Note:
        If you wanna use the slack to show the logging info, you have to export
        an enviroment variable named ``SLACK_TOEKN``, and fill it with your own
        slack token. More info about the slack token, view `Legacy tokens`_.
        The logging file directory is specified by the enviroment variable
        ``log_dir``.

    Args:
        prefix (str): The prefix of the log filename.

    Keyword Args:
        level (int level, optional): Logging level.
        slack (bool, optional): Whether send a message to slack.
        console (bool, optional): Whether print logging info into the console.

    Attributes:
        level (int level, optional): Logging level.
        slack (bool, optional): Whether send a message to slack.
        console (bool, optional): Whether print logging info into the console.
        log_file (str): The path of the log file. The filename is generated by
            the datetime.
    '''

    def __init__(self, prefix, *, level=logging.DEBUG, console=True):
        self.console = console
        self.logging_level = level
        prefix += '-'
        log_filename = prefix + str(datetime.now()).replace(' ', '-') + '.log'
        self.log_file = os.path.join(os.getenv('log_dir'), log_filename)
        self.config_logger()
        logging.info('=' * 80)
        logging.info('LOG FILE:{}'.format(log_filename))

    def config_logger(self):
        '''Apply the user configurations.
        If you update the logger configurations after the init step, you should
        call this function manually to apply the new configurations.
        '''
        logging.basicConfig(filename=self.log_file,
                            level=self.logging_level,
                            format='[%(asctime)s]-[%(levelname)s]-%(message)s')

        if self.console:
            formatter = logging.Formatter(
                '[%(asctime)s]-[%(levelname)s]-%(message)s')
            console = logging.StreamHandler()
            console.setLevel(logging.DEBUG)
            console.setFormatter(formatter)
            logging.getLogger('').addHandler(console)


if __name__ == '__main__':
    pass
